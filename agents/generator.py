from __future__ import annotations
import re
from typing import Any, Dict, List
from utils import call_llm


class GeneratorAgent:
    def __init__(self, llm):
        self.llm = llm
        self.SYS = """B·∫°n l√† GeneratorAgent ‚Äì chuy√™n gia t·∫°o **template ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i AFFINA**.

QUY T·∫ÆC B·∫§T DI B·∫§T D·ªäCH
1. Ch·ªâ ƒë∆∞·ª£c ph√©p in ƒë√∫ng **3 heading c·∫•p 2**, xu·∫•t hi·ªán **m·ªôt l·∫ßn** v√† ƒë√∫ng th·ª© t·ª±:
   ‚Ä¢ ## Ch∆∞∆°ng Tr√¨nh
   ‚Ä¢ ## D·ªØ Li·ªáu
   ‚Ä¢ ## Theo d√µi
   ‚Üí Ngay sau m·ªói heading, d√≤ng k·∫ø ti·∫øp B·∫ÆT BU·ªòC b·∫Øt ƒë·∫ßu b·∫±ng k√Ω t·ª± ‚Äú|‚Äù.

2. TUY·ªÜT ƒê·ªêI kh√¥ng t·∫°o b·∫•t k·ª≥ markdown n√†o kh√°c: ‚úó `###`, ‚úó `####`, ‚úó `*`/`-` list, ‚úó ch·ªØ ƒë·∫≠m `**`, ‚úó code-block ``` ‚Ä¶ ```.

3. To√†n b·ªô ph·∫ßn th√¢n ph·∫£i l√† b·∫£ng v·ªõi d·∫•u **|**; gi·ªØ nguy√™n ‚ÄúNaN‚Äù, bullet **¬∑** v√† k√Ω hi·ªáu **√º**; ƒë√∫ng s·ªë c·ªôt, ƒë√∫ng th·ª© t·ª± d√≤ng.

4. N·∫øu kh√¥ng c√≥ s·ªë li·ªáu, GI·ªÆ nguy√™n placeholder trong **[d·∫•u ngo·∫∑c vu√¥ng]**
   (vd. `[S·ªë ti·ªÅn]`, `[T·ª∑ l·ªá]`, `[S·∫£n ph·∫©m 1]` ‚Ä¶) ‚Äì kh√¥ng t·ª± ch·∫ø gi√° tr·ªã.

5. N·∫øu c√≥ FEEDBACK, h√£y ch·ªânh v√†o template nh∆∞ng **kh√¥ng** ghi ch√∫ gi·∫£i.

6. Sau khi in template, k·∫øt th√∫c b·∫±ng d√≤ng `TEMPLATE_END`.

ƒê·ªäNH D·∫†NG OUTPUT
üß† CHAIN OF THOUGHT - GENERATOR:
<thinking>
(1) Nh·∫≠p PLAN (8 m·ª•c) ‚Üí x√°c ƒë·ªãnh: TH·ªúI GIAN, ∆ØU ƒê√ÉI, S·∫¢N PH·∫®M, %GI·∫¢M.
(2) √Åp d·ª•ng FEEDBACK (n·∫øu c√≥) ‚Üí s·ª≠a ƒë√∫ng √¥; KH√îNG th√™m l·ªùi gi·∫£i th√≠ch.
(3) Ki·ªÉm tra CONTEXT: c√≥ ƒë·ªß 3 section g·ªëc? N·∫øu thi·∫øu ‚Üí GI·ªÆ placeholder, KH√îNG t·ª± b·ªãa s·ªë.
(4) D·ª±ng TEMPLATE: copy khung c·ªë ƒë·ªãnh, ƒëi·ªÅn gi√° tr·ªã / placeholder.
(5) Ki·ªÉm tra format: 3 heading, c√°c d·∫•u |, NaN, ¬∑; xo√° markdown l·∫° (###, **, -, ```).
</thinking>

<template>
## Ch∆∞∆°ng Tr√¨nh
| I. TH√îNG TIN CHUNG
| ¬∑       Th·ªùi gian di·ªÖn ra ch∆∞∆°ng tr√¨nh: [Th·ªùi gian]
| ¬∑       Ph·∫°m vi: [Ph·∫°m vi √°p d·ª•ng]
| ¬∑       ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng: [ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng]

| II. M·ª§C TI√äU
| 1.     [M·ª•c ti√™u 1]
| 2.     [M·ª•c ti√™u 2]
| 3.     [M·ª•c ti√™u 3]

| III. N·ªòI DUNG ∆ØU ƒê√ÉI
| [M√¥ t·∫£ ∆∞u ƒë√£i]
| STT | D·ªãch v·ª•/S·∫£n ph·∫©m VAS | ∆Øu ƒë√£i
| 1 | [S·∫£n ph·∫©m 1] |  ∆Øu ƒë√£i: [T·ª∑ l·ªá gi·∫£m]
| NaN | NaN |  Gi√° tr·ªã t·ªëi ƒëa: [S·ªë ti·ªÅn]
| NaN | NaN |  [Chi ti·∫øt b·ªï sung]
| 2 | [S·∫£n ph·∫©m 2] |  ∆Øu ƒë√£i: [T·ª∑ l·ªá gi·∫£m]
| NaN | NaN |  Gi√° tr·ªã t·ªëi ƒëa: [S·ªë ti·ªÅn]
| NaN | NaN |  [Chi ti·∫øt b·ªï sung]
| T·ªïng | NaN | [T·ªïng gi√° tr·ªã ∆∞u ƒë√£i]

| IV. H√åNH TH·ª®C TRI·ªÇN KHAI
| ¬∑       K√™nh b√°n h√†ng: [C√°c k√™nh]
| ¬∑       H√¨nh th·ª©c t·∫∑ng voucher: [C√°ch th·ª©c]
| ¬∑       K·∫øt h·ª£p truy·ªÅn th√¥ng ch√©o:
| o   Thi·∫øt k·∫ø banner, b√†i vi·∫øt social, email marketing
| o   H·ª£p t√°c v·ªõi ƒë·ªëi t√°c health-care / nh√† thu·ªëc / thi·∫øt b·ªã y t·∫ø

| V. ƒêI·ªÄU KI·ªÜN & QUY ƒê·ªäNH
| 1.      [ƒêi·ªÅu ki·ªán 1]
| 2.      [ƒêi·ªÅu ki·ªán 2]

| Th√°ng | Doanh thu VAS ∆∞·ªõc t√≠nh | Chi ph√≠ ∆∞u ƒë√£i | % khuy·∫øn m√£i trung b√¨nh |
| [Th√°ng 1] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| [Th√°ng 2] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| [Th√°ng 3] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| T·ªïng | [T·ªïng doanh thu] | [T·ªïng chi ph√≠] | [T·ª∑ l·ªá TB] |

## D·ªØ Li·ªáu
| D·ªØ li·ªáu 3 th√°ng li·ªÅn k·ªÅ |
| Th√°ng | NaN | DMP KH ti·ªÅm nƒÉng | TBYT KH ti·ªÅm nƒÉng | Checkup KH ti·ªÅm nƒÉng | Califonia KH ti·ªÅm nƒÉng | T·ªïng |
| Th√°ng [A] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |
| Th√°ng [B] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |
| Th√°ng [C] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |

| Estimate D·ªØ li·ªáu 3 th√°ng ([Th√°ng 1]-[Th√°ng 3]) |
| Th√°ng | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| [Th√°ng 2] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| [Th√°ng 3] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |

| Ticket size trung b√¨nh | NaN | NaN | NaN | NaN | NaN | [S·ªë] |
| NaN | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | Trung b√¨nh |
| Ph√≠ trung b√¨nh ∆∞·ªõc T√≠nh | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] |

| Doanh thu VAS ∆∞·ªõc t√≠nh |
| Doanh Thu ∆∞·ªõc t√≠nh | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |

| Chi ph√≠ khuy·∫øn m√£i |
| NaN | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] | [T·ª∑ l·ªá TB] |

## Theo d√µi
| Kh√°ch H√†ng Th·ª±c T·∫ø |
| Th√°ng | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | [S·ªë] | NaN | NaN | NaN | NaN | [S·ªë] |
| T·ªâ l·ªá | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| [Th√°ng 2] | [S·ªë] | NaN | NaN | NaN | NaN | [S·ªë] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] |
| [Th√°ng 3] | [S·ªë] | NaN | NaN | NaN | NaN | [S·ªë] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng] |

| Doanh thu VAS |
| Doanh Thu ∆∞·ªõc t√≠nh | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |

| Chi ph√≠ khuy·∫øn m√£i |
| NaN | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |
</template>
TEMPLATE_END

H∆Ø·ªöNG D·∫™N N·ªòI B·ªò:
‚Ä¢ Thay [Th√°ng 1-3] b·∫±ng th√°ng c·ª• th·ªÉ; ƒëi·ªÅn d·ªØ li·ªáu h·ª£p l√Ω.
‚Ä¢ Gi·ªØ nguy√™n c·∫•u tr√∫c & k√Ω t·ª± ƒë·∫∑c bi·ªát.
‚Ä¢ Kh√¥ng th√™m gi·∫£i th√≠ch sau `TEMPLATE_END`.
‚Ä¢ N·∫øu th√™m b·∫•t c·ª© k√Ω t·ª± n√†o sau TEMPLATE_END ‚Üí score = 0
"""

    def generate(
        self,
        user_req: str,
        plan_data: Any,
        context_segments: List[str] | None = None,
        feedback: str = "",
    ) -> Dict[str, Any]:
        # --- Build context block (n·∫øu c√≥) ---
        ctx_block = ""
        if context_segments:
            clipped = [
                seg[:800] + " ‚Ä¶" if len(seg) > 800 else seg for seg in context_segments[:5]
            ]
            ctx_block = "\n\n### NG·ªÆ C·∫¢NH THAM KH·∫¢O (KH√îNG SAO CH√âP)\n" + "\n\n".join(f"- {c}" for c in clipped)

        plan_text = plan_data.get("plan", "") if isinstance(plan_data, dict) else str(plan_data)
        fb_block = f"\n\n### FEEDBACK V√íNG TR∆Ø·ªöC\n{feedback}" if feedback else ""

        prompt = f"""{self.SYS}

### Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG
{user_req}

### CHI·∫æN L∆Ø·ª¢C T·ª™ ORCHESTRATOR
{plan_text}{ctx_block}{fb_block}

### H∆Ø·ªöNG D·∫™N CU·ªêI
‚Ä¢ B·∫ÆT BU·ªòC c√≥ ƒë·ªß 3 heading ƒë√∫ng th·ª© t·ª± v√† ph·∫£i l√† d·∫°ng B·∫¢NG GI·ªêNG NH∆Ø TEMPLATE:
  1. ## Ch∆∞∆°ng Tr√¨nh (5 ph·∫ßn: TH√îNG TIN CHUNG, M·ª§C TI√äU, N·ªòI DUNG ∆ØU ƒê√ÉI, H√åNH TH·ª®C TRI·ªÇN KHAI, ƒêI·ªÄU KI·ªÜN & QUY ƒê·ªäNH)
  2. ## D·ªØ Li·ªáu (5 ph·∫ßn b·∫£ng d·ªØ li·ªáu)
  3. ## Theo d√µi (3 ph·∫ßn b·∫£ng theo d√µi)
‚Ä¢ Sau d√≤ng cu·ªëi c√πng ghi ƒë√∫ng `TEMPLATE_END`.
"""
        raw = call_llm(self.llm, prompt).strip()
        return self._extract_thinking_and_content(raw)

    @staticmethod
    def _extract_thinking_and_content(raw: str) -> Dict[str, Any]:
        thinking = ""
        content = raw

        # 1) T√°ch thinking
        for pat in [
            r"üß† CHAIN OF THOUGHT - GENERATOR:\s*<thinking>.*?</thinking>",
            r"<thinking>.*?</thinking>",
            r"<think>.*?</think>",
        ]:
            m = re.search(pat, content, re.DOTALL | re.IGNORECASE)
            if m:
                thinking = m.group(0)
                content = re.sub(pat, "", content, flags=re.DOTALL | re.IGNORECASE).strip()
                break

        # 2) Lo·∫°i b·ªè vƒÉn b·∫£n th·ª´a
        for pat in [
            r"TEMPLATE:\s*",
            r"Template nh∆∞ sau:\s*",
            r"D·ª±a tr√™n.*?template:\s*",
            r"Theo y√™u c·∫ßu.*?:\s*",
            r"\*\(Based on.*?\)\*\s*",
            r"-{3,}\s*",
            r"^\s*\*+.*?\*+\s*$",
        ]:
            content = re.sub(pat, "", content, flags=re.MULTILINE | re.IGNORECASE).strip()

        # 3) B·∫£o ƒë·∫£m b·∫Øt ƒë·∫ßu ƒë√∫ng heading
        if not content.startswith("## Ch∆∞∆°ng Tr√¨nh"):
            m = re.search(r"## Ch∆∞∆°ng Tr√¨nh", content, re.IGNORECASE)
            if m:
                content = content[m.start():].strip()

        return {"thinking": thinking, "content": content, "full_response": raw}

    @staticmethod
    def _clean_response(response: str) -> str:
        """Clean extra artifacts (kh√¥ng d√πng trong pipeline ch√≠nh, nh∆∞ng gi·ªØ ph√≤ng)."""
        if not response:
            return ""
        for pat in [
            r"<think>.*?</think>",
            r"<thinking>.*?</thinking>",
            r"\*\(Based on.*?\)\*",
            r"TEMPLATE.*?:",
            r"D·ª±a tr√™n.*?:",
            r"-{3,}",
            r"^\s*###.*$",
            r"^\s*\*\*.*?\*\*.*$",
        ]:
            response = re.sub(pat, "", response, flags=re.MULTILINE | re.DOTALL | re.IGNORECASE)
        response = re.sub(r"\n\s*\n\s*\n", "\n\n", response).strip()
        return response