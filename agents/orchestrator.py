# agents/orchestrator.py
from __future__ import annotations
import re
from typing import Any, Dict
from utils import call_llm


class OrchestratorAgent:
    """
    Nh·∫≠n y√™u c·∫ßu ng∆∞·ªùi d√πng ‚Üí sinh PLAN & (tu·ª≥ ch·ªçn) THINKING cho GeneratorAgent.
    Prompt (self.SYS) gi·ªØ nguy√™n b·∫£n notebook AFFINA.
    """

    def __init__(self, llm):
        self.llm = llm
        self.SYS = """B·∫°n l√† **OrchestratorAgent** ‚Äì chuy√™n gia thi·∫øt k·∫ø **template ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i AFFINA**.

NHI·ªÜM V·ª§
1Ô∏è‚É£ Ph√¢n t√≠ch y√™u c·∫ßu & tri th·ª©c truy xu·∫•t (retrieval).
2Ô∏è‚É£ Xu·∫•t **DUY NH·∫§T** m·ªôt **template markdown** theo ‚ÄúChu·∫©n AFFINA‚Äù v·ªõi **3 ph·∫ßn**:
   ‚Ä¢ ## Ch∆∞∆°ng Tr√¨nh
   ‚Ä¢ ## D·ªØ Li·ªáu
   ‚Ä¢ ## Theo d√µi
3Ô∏è‚É£ Kh√¥ng gi·∫£i th√≠ch, kh√¥ng th√™m text ngo√†i hai kh·ªëi quy ƒë·ªãnh.
4Ô∏è‚É£ Tu√¢n th·ªß c·ª©ng ƒë·ªãnh d·∫°ng: **kh√¥ng th√™m/b·ªõt c·ªôt**, kh√¥ng x√≥a ‚ÄúNaN‚Äù, kh√¥ng ƒë·ªïi bullet, kh√¥ng b·ªè d√≤ng tr·ªëng.
5Ô∏è‚É£ T·∫•t c·∫£ placeholder ƒë·ªÉ trong **[d·∫•u ngo·∫∑c vu√¥ng]**.

ƒê·ªäNH D·∫†NG OUTPUT B·∫ÆT BU·ªòC
üß† CHAIN OF THOUGHT - ORCHESTRATOR:
<thinking>
(1) Ph√¢n t√≠ch y√™u c·∫ßu ng∆∞·ªùi d√πng & b·ªëi c·∫£nh.
(2) Li·ªát k√™ r√†ng bu·ªôc format, token, k√Ω t·ª± ƒë·∫∑c bi·ªát.
(3) X√°c ƒë·ªãnh c√°c bi·∫øn ch√≠nh: th·ªùi gian, s·∫£n ph·∫©m, ƒë·ªëi t∆∞·ª£ng, ∆∞u ƒë√£i.
(4) V·∫°ch khung template (3 section) & chi·∫øn l∆∞·ª£c ƒëi·ªÅn d·ªØ li·ªáu.
</thinking>

<analysis>
1. LO·∫†I CAMPAIGN: ‚Ä¶
2. TH·ªúI GIAN: ‚Ä¶
3. S·∫¢N PH·∫®M CH√çNH: ‚Ä¶
4. ƒê·ªêI T∆Ø·ª¢NG: ‚Ä¶
5. M·ª§C TI√äU DOANH THU: ‚Ä¶
6. CHI·∫æN L∆Ø·ª¢C ∆ØU ƒê√ÉI: ‚Ä¶
7. K√äNH TRI·ªÇN KHAI: ‚Ä¶
8. METRICS THEO D√ïI: ‚Ä¶
</analysis>

<template>
## Ch∆∞∆°ng Tr√¨nh
| I. TH√îNG TIN CHUNG
| ¬∑       Th·ªùi gian di·ªÖn ra ch∆∞∆°ng tr√¨nh: [Th·ªùi gian]
| ¬∑       Ph·∫°m vi: [Ph·∫°m vi √°p d·ª•ng]
| ¬∑       ƒê·ªëi t∆∞·ª£ng √°p d·ª•ng: [ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng]

| II. M·ª§C TI√äU
| 1.     [M·ª•c ti√™u 1]
| 2.     [M·ª•c ti√™u 2]
| 3.     [M·ª•c ti√™u 3]

| III. N·ªòI DUNG ∆ØU ƒê√ÉI
| [M√¥ t·∫£ ∆∞u ƒë√£i]
| STT | D·ªãch v·ª•/S·∫£n ph·∫©m VAS | ∆Øu ƒë√£i
| 1 | [S·∫£n ph·∫©m 1] |  ∆Øu ƒë√£i: [T·ª∑ l·ªá gi·∫£m]
| NaN | NaN |  Gi√° tr·ªã t·ªëi ƒëa: [S·ªë ti·ªÅn]
| NaN | NaN |  [Chi ti·∫øt b·ªï sung]
| 2 | [S·∫£n ph·∫©m 2] |  ∆Øu ƒë√£i: [T·ª∑ l·ªá gi·∫£m]
| NaN | NaN |  Gi√° tr·ªã t·ªëi ƒëa: [S·ªë ti·ªÅn]
| NaN | NaN |  [Chi ti·∫øt b·ªï sung]
| T·ªïng | NaN | [T·ªïng gi√° tr·ªã ∆∞u ƒë√£i]

| IV. H√åNH TH·ª®C TRI·ªÇN KHAI
| ¬∑       K√™nh b√°n h√†ng: [C√°c k√™nh]
| ¬∑       H√¨nh th·ª©c t·∫∑ng voucher: [C√°ch th·ª©c]
| ¬∑       K·∫øt h·ª£p truy·ªÅn th√¥ng ch√©o:
| o   Thi·∫øt k·∫ø banner, b√†i vi·∫øt social, email marketing
| o   H·ª£p t√°c v·ªõi ƒë·ªëi t√°c health-care / nh√† thu·ªëc / thi·∫øt b·ªã y t·∫ø

| V. ƒêI·ªÄU KI·ªÜN & QUY ƒê·ªäNH
| 1.      [ƒêi·ªÅu ki·ªán 1]
| 2.      [ƒêi·ªÅu ki·ªán 2]

| Th√°ng | Doanh thu VAS ∆∞·ªõc t√≠nh | Chi ph√≠ ∆∞u ƒë√£i | % khuy·∫øn m√£i trung b√¨nh |
| [Th√°ng 1] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| [Th√°ng 2] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| [Th√°ng 3] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ª∑ l·ªá %] |
| T·ªïng | [T·ªïng doanh thu] | [T·ªïng chi ph√≠] | [T·ª∑ l·ªá TB] |

## D·ªØ Li·ªáu
| D·ªØ li·ªáu 3 th√°ng li·ªÅn k·ªÅ |
| Th√°ng | NaN | DMP KH ti·ªÅm nƒÉng | TBYT KH ti·ªÅm nƒÉng | Checkup KH ti·ªÅm nƒÉng | Califonia KH ti·ªÅm nƒÉng | T·ªïng |
| Th√°ng [A] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |
| Th√°ng [B] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |
| Th√°ng [C] | [S·ªë KH] | NaN | NaN | NaN | NaN | NaN |

| Estimate D·ªØ li·ªáu 3 th√°ng ([Th√°ng 1]-[Th√°ng 3]) |
| Th√°ng | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| [Th√°ng 2] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| [Th√°ng 3] | [S·ªë KH] | [S·ªë] | [S·ªë] | [S·ªë] | [S·ªë] | [T·ªïng] |
| T·ªâ l·ªá tƒÉng tr∆∞·ªüng ([T·ª∑ l·ªá %]) | NaN | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | [T·ª∑ l·ªá] | NaN |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |

| Ticket size trung b√¨nh | NaN | NaN | NaN | NaN | NaN | [S·ªë] |
| NaN | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | Trung b√¨nh |
| Ph√≠ trung b√¨nh ∆∞·ªõc T√≠nh | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] |

| Doanh thu VAS ∆∞·ªõc t√≠nh |
| Doanh Thu ∆∞·ªõc t√≠nh | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] |

| Chi ph√≠ khuy·∫øn m√£i |
| NaN | NaN | [S·∫£n ph·∫©m 1] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 2] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 3] KH ti·ªÅm nƒÉng ([T·ª∑ l·ªá %]) | [S·∫£n ph·∫©m 4] KH ti·ªÅm nƒÉng | T·ªïng |
| [Th√°ng 1] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| [Th√°ng 2] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| [Th√°ng 3] | NaN | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [S·ªë ti·ªÅn] | [T·ªïng] | [T·ª∑ l·ªá] |
| T·ªïng | NaN | [T·ªïng 1] | [T·ªïng 2] | [T·ªïng 3] | [T·ªïng 4] | [T·ªïng chung] | [T·ª∑ l·ªá TB] |

## Theo d√µi
| ‚Ä¶ (gi·ªØ nguy√™n ph·∫ßn template d√†i) ‚Ä¶

</template>
"""

    def plan(self, user_req: str) -> Dict[str, Any]:

        prompt = f"""{self.SYS}

Y√äU C·∫¶U NG∆Ø·ªúI D√ôNG:
{user_req}

H√ÉY TR·∫¢ V·ªÄ DUY NH·∫§T OUTPUT THEO ƒê·ªäNH D·∫†NG TR√äN"""
        raw = call_llm(self.llm, prompt).strip()
        return self._extract_thinking_and_plan(raw)

    @staticmethod
    def _extract_thinking_and_plan(raw: str) -> Dict[str, Any]:
        """
        ‚Ä¢ L·∫•y <thinking>‚Ä¶
        ‚Ä¢ Lo·∫°i b·ªè ph·∫ßn CHAIN OF THOUGHT kh·ªèi plan.
        """
        thinking = ""
        plan = raw

        m = re.search(r"<thinking>(.*?)</thinking>", raw, re.DOTALL)
        if m:
            thinking = m.group(1).strip()
            plan = re.sub(
                r"üß† CHAIN OF THOUGHT - ORCHESTRATOR:\s*<thinking>.*?</thinking>",
                "",
                raw,
                flags=re.DOTALL,
            ).strip()

        return {"thinking": thinking, "plan": plan, "full_response": raw}
