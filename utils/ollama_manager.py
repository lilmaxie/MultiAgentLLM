import subprocess, time, shutil, atexit, requests, os, sys
from pathlib import Path
from config import CONFIG

HOST = "http://localhost:11434"
DEFAULT_MODEL = CONFIG["OLLAMA_MODELS"][0]

# Fix encoding issues on Windows
if sys.platform.startswith('win'):
    os.environ['PYTHONIOENCODING'] = 'utf-8'

def _running() -> bool:
    try:
        return requests.get(f"{HOST}/api/tags", timeout=2).status_code == 200
    except requests.exceptions.RequestException:
        return False

def _start_daemon():
    if shutil.which("ollama") is None:
        raise RuntimeError("‚ùå L·ªánh 'ollama' ch∆∞a c√†i!")
    proc = subprocess.Popen(
        ["ollama", "serve"],
        stdout=subprocess.DEVNULL,
        stderr=subprocess.STDOUT,
    )
    atexit.register(proc.terminate)
    return proc

def _model_exists(model: str) -> bool:
    """Ki·ªÉm tra xem model ƒë√£ t·ªìn t·∫°i local ch∆∞a"""
    try:
        root = Path.home() / ".ollama" / "models"
        return root.exists() and any(model in p.name for p in root.glob(f"**/{model.replace(':','_')}*"))
    except Exception:
        return False

def _pull(model: str):
    """Pull model v·ªõi Unicode handling t·ªët h∆°n"""
    # Ki·ªÉm tra xem model ƒë√£ c√≥ ch∆∞a
    if _model_exists(model):
        print(f"‚úÖ {model} ƒë√£ c√≥ s·∫µn.")
        return True
    
    print(f"‚è¨ ƒêang pull {model}...")
    try:
        # S·ª≠ d·ª•ng encoding UTF-8 v√† handle errors
        result = subprocess.run(
            ["ollama", "pull", model], 
            capture_output=True, 
            text=True,
            encoding='utf-8',     # Explicitly set UTF-8
            errors='replace',     # Replace problematic characters
            timeout=300           # 5 ph√∫t timeout
        )
        
        if result.returncode == 0:
            print(f"‚úÖ {model} pull th√†nh c√¥ng!")
            return True
        else:
            error_output = result.stderr if result.stderr else result.stdout
            
            # X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
            if "no such host" in error_output or "dial tcp" in error_output:
                print(f"‚ùå L·ªói k·∫øt n·ªëi m·∫°ng khi pull {model}")
                print("üîß Gi·∫£i ph√°p:")
                print("   - Ki·ªÉm tra k·∫øt n·ªëi internet")
                print("   - Ki·ªÉm tra DNS settings")
                print("   - Th·ª≠ l·∫°i sau v√†i ph√∫t")
                print("   - Ho·∫∑c s·ª≠ d·ª•ng model kh√°c ƒë√£ c√≥ s·∫µn")
            elif "412" in error_output or "newer version" in error_output:
                print(f"‚ùå Model {model} y√™u c·∫ßu phi√™n b·∫£n Ollama m·ªõi h∆°n!")
                print("üîÑ H√£y c·∫≠p nh·∫≠t Ollama t·∫°i: https://ollama.com/download")
            elif "not found" in error_output:
                print(f"‚ùå Model {model} kh√¥ng t·ªìn t·∫°i. Ki·ªÉm tra l·∫°i t√™n model.")
            else:
                print(f"‚ùå L·ªói khi pull {model}: {error_output}")
            
            return False
            
    except subprocess.TimeoutExpired:
        print(f"‚ùå Timeout khi pull {model} (>5 ph√∫t)")
        return False
    except UnicodeDecodeError as e:
        print(f"‚ùå L·ªói encoding khi pull {model}: {e}")
        print("üîß Th·ª≠ v·ªõi method kh√°c...")
        return _pull_with_popen(model)
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh khi pull {model}: {e}")
        return False

def _pull_with_popen(model: str):
    """Alternative pull method s·ª≠ d·ª•ng Popen v·ªõi real-time output"""
    try:
        print(f"‚è¨ ƒêang pull {model} (method 2)...")
        
        # Set environment for UTF-8
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        process = subprocess.Popen(
            ["ollama", "pull", model],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            encoding='utf-8',
            errors='replace',
            env=env,
            bufsize=1,
            universal_newlines=True
        )
        
        # ƒê·ªçc output real-time
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                # Clean output for display
                clean_output = output.strip().replace('\r', '').replace('\n', '')
                if clean_output:
                    print(f"  {clean_output}")
        
        return_code = process.wait()
        
        if return_code == 0:
            print(f"‚úÖ {model} pull th√†nh c√¥ng!")
            return True
        else:
            print(f"‚ùå Pull {model} th·∫•t b·∫°i v·ªõi return code: {return_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói trong alternative pull method: {e}")
        return False

def ensure_ollama_ready(model: str = DEFAULT_MODEL):
    """ƒê·∫£m b·∫£o Ollama s·∫µn s√†ng v·ªõi error handling"""
    if not _running():
        print("üîÑ Kh·ªüi ƒë·ªông Ollama daemon‚Ä¶")
        _start_daemon()
        for _ in range(20):
            if _running():
                break
            time.sleep(0.5)
        else:
            raise RuntimeError("‚ùå Ollama daemon kh√¥ng kh·ªüi ƒë·ªông!")
    
    print("‚úÖ Ollama daemon OK")
    print(f"üîç Ki·ªÉm tra model {model}...")
    
    # Th·ª≠ pull model, nh∆∞ng kh√¥ng fail n·∫øu kh√¥ng th√†nh c√¥ng
    success = _pull(model)
    if not success:
        print(f"‚ö†Ô∏è  Kh√¥ng th·ªÉ pull {model}, ki·ªÉm tra c√°c model c√≥ s·∫µn...")
        
        # Li·ªát k√™ c√°c model c√≥ s·∫µn v·ªõi Unicode handling
        try:
            result = subprocess.run(
                ["ollama", "list"], 
                capture_output=True, 
                text=True,
                encoding='utf-8',
                errors='replace',
                timeout=10
            )
            if result.returncode == 0:
                print("üìã C√°c model c√≥ s·∫µn:")
                print(result.stdout)
            else:
                print("‚ùå Kh√¥ng th·ªÉ li·ªát k√™ models")
        except Exception as e:
            print(f"‚ùå L·ªói khi li·ªát k√™ models: {e}")
        
        # ƒê·ªÅ xu·∫•t c√°c model thay th·∫ø ph·ªï bi·∫øn
        print("\nüí° C√°c model thay th·∫ø c√≥ th·ªÉ th·ª≠:")
        print("   - llama3.2:1b")
        print("   - llama3.2:3b") 
        print("   - qwen2:1.5b")
        print("   - phi3:mini")
        
        raise RuntimeError(f"‚ùå Kh√¥ng th·ªÉ s·ª≠ d·ª•ng model {model}")
    
    print("‚úÖ Model OK")