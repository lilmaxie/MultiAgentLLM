import sys, shutil, subprocess, os
from pathlib import Path
from config import CONFIG

# Fix encoding issues on Windows
if sys.platform.startswith('win'):
    os.environ['PYTHONIOENCODING'] = 'utf-8'

def _exists(model: str) -> bool:
    root = Path.home() / ".ollama" / "models"
    return root.exists() and any(model in p.name for p in root.glob(f"**/{model.replace(':','_')}*"))

def check_ollama_version():
    """Ki·ªÉm tra phi√™n b·∫£n Ollama v√† ƒë∆∞a ra c·∫£nh b√°o n·∫øu c·∫ßn"""
    try:
        result = subprocess.run(
            ["ollama", "version"], 
            capture_output=True, 
            text=True,
            encoding='utf-8',
            errors='replace'
        )
        if result.returncode == 0:
            print(f"üìã Ollama version: {result.stdout.strip()}")
        else:
            print("‚ö†Ô∏è  Kh√¥ng th·ªÉ ki·ªÉm tra phi√™n b·∫£n Ollama")
    except Exception as e:
        print(f"‚ö†Ô∏è  L·ªói khi ki·ªÉm tra phi√™n b·∫£n: {e}")

def pull(model: str):
    if _exists(model):
        print(f"‚úÖ  {model} ƒë√£ c√≥.")
        return True
    
    print(f"‚è¨  Pull {model} ‚Ä¶")
    try:
        # Set environment for UTF-8
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        result = subprocess.run(
            ["ollama", "pull", model], 
            capture_output=True, 
            text=True,
            encoding='utf-8',
            errors='replace',
            env=env,
            check=True
        )
        print(f"‚úÖ  {model} OK")
        return True
        
    except subprocess.CalledProcessError as e:
        error_output = e.stderr if e.stderr else e.stdout
        
        # X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
        if "412" in error_output or "newer version" in error_output:
            print(f"‚ùå  Model {model} y√™u c·∫ßu phi√™n b·∫£n Ollama m·ªõi h∆°n!")
            print("üîÑ  H√£y c·∫≠p nh·∫≠t Ollama t·∫°i: https://ollama.com/download")
            print("üí°  Ho·∫∑c th·ª≠ s·ª≠ d·ª•ng model kh√°c t∆∞∆°ng th√≠ch v·ªõi phi√™n b·∫£n hi·ªán t·∫°i")
        elif "not found" in error_output:
            print(f"‚ùå  Model {model} kh√¥ng t·ªìn t·∫°i. Ki·ªÉm tra l·∫°i t√™n model.")
        else:
            print(f"‚ùå  L·ªói khi pull {model}: {error_output}")
        
        return False
        
    except UnicodeDecodeError as e:
        print(f"‚ùå  L·ªói encoding khi pull {model}: {e}")
        print("üîß  Th·ª≠ v·ªõi method kh√°c...")
        return pull_with_popen(model)
    except Exception as e:
        print(f"‚ùå  L·ªói kh√¥ng x√°c ƒë·ªãnh khi pull {model}: {e}")
        return False

def pull_with_popen(model: str):
    """Alternative pull method v·ªõi real-time output"""
    try:
        print(f"‚è¨  Pull {model} (method 2)...")
        
        # Set environment for UTF-8
        env = os.environ.copy()
        env['PYTHONIOENCODING'] = 'utf-8'
        
        process = subprocess.Popen(
            ["ollama", "pull", model],
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            text=True,
            encoding='utf-8',
            errors='replace',
            env=env,
            bufsize=1,
            universal_newlines=True
        )
        
        # ƒê·ªçc output real-time
        while True:
            output = process.stdout.readline()
            if output == '' and process.poll() is not None:
                break
            if output:
                # Clean output for display
                clean_output = output.strip().replace('\r', '').replace('\n', '')
                if clean_output and not clean_output.startswith('pulling'):
                    print(f"  {clean_output}")
        
        return_code = process.wait()
        
        if return_code == 0:
            print(f"‚úÖ  {model} OK")
            return True
        else:
            print(f"‚ùå  Pull {model} th·∫•t b·∫°i v·ªõi return code: {return_code}")
            return False
            
    except Exception as e:
        print(f"‚ùå  L·ªói trong alternative pull method: {e}")
        return False

def main(models):
    if shutil.which("ollama") is None:
        sys.exit("‚ùå 'ollama' ch∆∞a c√†i.")
    
    # Ki·ªÉm tra phi√™n b·∫£n Ollama
    check_ollama_version()
    
    success_count = 0
    for m in models:
        if pull(m.strip()):
            success_count += 1
    
    print(f"\nüìä K·∫øt qu·∫£: {success_count}/{len(models)} model ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")

if __name__ == "__main__":
    cli = sys.argv[1:]
    models = cli or CONFIG.get("OLLAMA_MODELS")
    main(models)